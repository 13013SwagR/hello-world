---
apiVersion: CcsStandard/v1
kind: CcsPipeline
metadata:
  name: unicorn_pipeline
spec:
  # Tasks definition
    # Tasks represent code or programs to be executed with the required parameters
  # Usage rules:
    # 1. Variables MUST NOT be made of other variables. This should be handled within the service integration
  # Implementation rules:
    # 1. Tasks MUST call at least one service
    # 2. Tasks MUST produce a result
    # 3. Tasks result object has 3 sub-objects:
    #       the result code(integer), the execution log artifact (URL), the pipeline artifacts (URL)

  product_data:
    name: unicorn # Name of the product

  tasks:
  # Example build type task
  - name: build_1st_unicorn # The task name, MUST be unique
    type: build # The task type
    depends_on: [] # The tasks required to be done and successful before this one
    build:
      environment: my-unicorn-crib # The environment in which to build the product
      command: docker build $REPOSITORY_DIR # The command to be executed to build the product
                                            # If multiple commands are required, then it should be a script
    # Implementation rules:
      # 1. The build MUST produce one or many build artifacts
      # 2. Only a build CAN produce a build artifact
      # 3. The build artifacts MUST have a unique build identifier per artifact, known as the build number


  # Example release type task
  - name: alpha_release_1st_unicorn
    type: release # The task type
    depends_on: ['build_app_a'] # The tasks required to be done and successful before this one
    release:
      level: alpha # The release level of this task, possible values based on **semantic versioning
      type: MINOR # The impact of this release, possible values based on **semantic versioning
      metadata: # [Optional]
    # Implementation rules:
      # 1. A Release task MUST create a release or pre-release version that will be associated
      #    with the corresponding build number
      # 2. A Release task MUST NOT produce new build artifacts. It MAY tag upstream build artifacts
      # 3. Versioning SHOULD implement **semantic versioning 2.0.0 standard

  - name: deploy_1st_unicorn_to_wonderland
    type: deployment
    depends_on: ['alpha_release_1st_unicorn']
    deployment:
      environment: wonderland # [Required] the target environment
      release:
        task: alpha_release_app_a  # [Required] Reference a previous release task
    # Implementation rules:
      # 1. The deployment task MUST only update a desired state database (example: git repository)
      #    for the target environment. It MAY trigger a synchronization of the orchestrator with the database
      # 2. Build artifacts MUST be pulled by the orchestrator
      # 3. Deployment configurations SHOULD be stored and versioned within the deployed application's repository
      ## Note: In this context, an orchestrator is a service able to read the desired state database
      ##       and apply/deploy the desired state, example: ***ArgoCD. More on this topic in future article

  