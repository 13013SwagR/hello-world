name: learn-github-actions
on:
  push:
    branches: [trunk]
env:
  ARTIFACT_NAME: heelo-world
jobs:
##### build ####################################################################################################
  build:
    runs-on: ubuntu-latest
    outputs:
      BUILD_NUMBER: ${{ steps.build_number.outputs.BUILD_NUMBER }}
    steps:
      - uses: actions/checkout@v2
      - name: Generate BUILD_NUMBER
        id: build_number 
        run: |
          echo "::set-output name=BUILD_NUMBER::$(echo ${GITHUB_SHA} | cut -c1-7)-$(date '+%Y%m%dT%H%M%S')"
    # echo "BUILD_NUMBER=$(echo ${GITHUB_SHA} | cut -c1-7)-$(date '+%Y%m%dT%H%M%S')" >> $GITHUB_ENV
    # echo "::set-output name=BUILD_NUMBER::$(echo ${GITHUB_SHA} | cut -c1-7)-${{ github.event.repository.updated_at}}"
      - name: Create artifact
        run: python3 build.py ${{ env.ARTIFACT_NAME }}-${{ steps.build_number.outputs.BUILD_NUMBER }}
      - name: validate build artifact creation
        run: ls -al 
      - name: Upload a Build Artifact
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2.3.0
        with:
          name: ${{ env.ARTIFACT_NAME }}-${{ steps.build_number.outputs.BUILD_NUMBER }}.yaml
          path: ${{ env.ARTIFACT_NAME }}-${{ steps.build_number.outputs.BUILD_NUMBER }}.yaml
      
##### release ##################################################################################################
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      RELEASE_VERSION: ${{ steps.release_version.outputs.RELEASE_VERSION }}
      VERSION_TAG: ${{ steps.new_version.outputs.version_tag }}
    steps:
    - name: Pull all git tags/releases
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Download artifact ${{ env.ARTIFACT_NAME }}-${{ needs.build.outputs.BUILD_NUMBER }}.yaml
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ needs.build.outputs.BUILD_NUMBER }}.yaml

    - name: Generate new semver compliant version
      id: new_version
      uses: paulhatch/semantic-version@v4.0.2
      with:
        tag_prefix: ""
        major_pattern: |
          /^((build|ci|docs|feat|fix|perf|refactor|test)(\([a-z 0-9,.\-]+\))?!: [\w \(\),:.;\-#&']+|\nBREAKING CHANGES: [\w \(\),:.;\-#&']+)$/
        minor_pattern: |
          /^(feat)(\([a-z 0-9,.\-]+\))?!?: [\w \(\),:.;\-#&']+$/
        format: "${major}.${minor}.${patch}-prerelease.${increment}+${{ needs.build.outputs.BUILD_NUMBER }}"
        short_tags: false

    - name: Set release version with pattern <version_tag>+<commits_increment>-<build_number>
      id: release_version
      run: echo "::set-output name=RELEASE_VERSION::${{ steps.new_version.outputs.version_tag }}+${{ steps.new_version.outputs.increment }}-${{ needs.build.outputs.BUILD_NUMBER }}"

    - name: Tag artifact file
      run: mv ${{ env.ARTIFACT_NAME }}-${{ needs.build.outputs.BUILD_NUMBER }}.yaml ${{ env.ARTIFACT_NAME }}-${{ steps.release_version.outputs.RELEASE_VERSION }}.yaml

    - name: Check if tag/release exists
      id: release_exists
      run: echo "::set-output name=RELEASE_EXISTS::$(git tag -l)"
    
    - name: Create tag 
      if: ${{ !env.ACT }}
      run: git tag ${{ steps.new_version.outputs.version_tag }} && git push --tags

    - name: Install git-release-notes
      run: npm install -g git-release-notes
    
    - name: Generate release notes for the first release
      if: ${{ !steps.release_exists.outputs.RELEASE_EXISTS }}
      run: git-release-notes $(git rev-list --max-parents=0 HEAD)..$(git log -1 --pretty=format:"%H") markdown > changelog.md

    - name: Generate release notes
      if: ${{ steps.release_exists.outputs.RELEASE_EXISTS }}
      run: git-release-notes $(git tag -l --sort=-version:refname | head -n 2 | tail -1 )..${{ steps.new_version.outputs.version_tag }} markdown > changelog.md
  
    - name: Create Github release
      if: ${{ !env.ACT }}
      uses: ncipollo/release-action@v1
      with:
        bodyFile: changelog.md
        artifacts: "${{ env.ARTIFACT_NAME }}-${{ steps.release_version.outputs.RELEASE_VERSION }}.yaml"
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: false
        artifactErrorsFailBuild: true 
        draft: false
        name: ${{ env.ARTIFACT_NAME }} ${{ steps.release_version.outputs.RELEASE_VERSION }} # name of the release
        replacesArtifacts: false
        removeArtifacts: false
        tag: ${{ steps.new_version.outputs.version_tag }}

 #### publish ############################################
 # Publishing of artifact could be done separatly 

 #### deploy ############################################
  deploy:
    # permissions:
    #   contents: write
    runs-on: ubuntu-latest
    needs: [release]
    steps:
    ## TODO implement checksum validation
    - name: Download artifact && checksum and validate artifact
      uses: dsaltares/fetch-gh-release-asset@1
      with:
        version: 'tags/${{ needs.release.outputs.VERSION_TAG }}'
        file: '${{ env.ARTIFACT_NAME }}-${{ needs.release.outputs.RELEASE_VERSION }}.yaml'
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Create or update gist
      uses: exuanbo/actions-deploy-gist@v1
      with:
        token: ${{ secrets.HELLO_WORLD_GIST }}
        gist_id: 077e59ab56b1fac4402711dc2c8b4ecb
        gist_description: "Hello World example"
        gist_file_name: ${{ env.ARTIFACT_NAME }}-${{ needs.release.outputs.RELEASE_VERSION }}.yaml
        file_path: ${{ env.ARTIFACT_NAME }}-${{ needs.release.outputs.RELEASE_VERSION }}.yaml

