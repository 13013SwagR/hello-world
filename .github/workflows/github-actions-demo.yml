name: learn-github-actions
on:
  push:
    branches: [trunk]
env:
  ARTIFACT_NAME: heelo-world
jobs:
##### build ####################################################################################################
  build:
    runs-on: ubuntu-latest
    outputs:
      BUILD_NUMBER: ${{ steps.build_number.outputs.BUILD_NUMBER }}
    steps:
      - uses: actions/checkout@v2
      - name: Generate BUILD_NUMBER
        id: build_number 
        run: |
          echo "::set-output name=BUILD_NUMBER::$(echo ${GITHUB_SHA} | cut -c1-7)-$(date '+%Y%m%dT%H%M%S')"
    # echo "BUILD_NUMBER=$(echo ${GITHUB_SHA} | cut -c1-7)-$(date '+%Y%m%dT%H%M%S')" >> $GITHUB_ENV
    # echo "::set-output name=BUILD_NUMBER::$(echo ${GITHUB_SHA} | cut -c1-7)-${{ github.event.repository.updated_at}}"
      - name: Create artifact
        run: python3 build.py ${{ env.ARTIFACT_NAME }}-${{ steps.build_number.outputs.BUILD_NUMBER }}
      - name: validate build artifact creation
        run: ls -al 
      - name: Upload a Build Artifact
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2.3.0
        with:
          name: ${{ env.ARTIFACT_NAME }}-${{ steps.build_number.outputs.BUILD_NUMBER }}.yaml
          path: ${{ env.ARTIFACT_NAME }}-${{ steps.build_number.outputs.BUILD_NUMBER }}.yaml
      
##### release ##################################################################################################
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Pull all git tags/releases
      uses: actions/checkout@v2
      with:
        fetch-depth: 0


    - name: Download artifact ${{ env.ARTIFACT_NAME }}-${{ needs.build.outputs.BUILD_NUMBER }}.yaml
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ needs.build.outputs.BUILD_NUMBER }}.yaml

    - name: Dump file system context
      run: ls -al

    - name: Generate new semver compliant version
      id: new_version
      uses: paulhatch/semantic-version@v4.0.2
      with:
        tag_prefix: ""
        major_pattern: |
          /^((build|ci|docs|feat|fix|perf|refactor|test)(\([a-z 0-9,.\-]+\))?!: [\w \(\),:.;\-#&']+|\nBREAKING CHANGES: [\w \(\),:.;\-#&']+)$/
        minor_pattern: |
          /^(feat)(\([a-z 0-9,.\-]+\))?!?: [\w \(\),:.;\-#&']+$/
        format: "${major}.${minor}.${patch}-prerelease.${increment}+${{ needs.build.outputs.BUILD_NUMBER }}"
        short_tags: false

    - name: Create tag 
      if: ${{ !env.ACT && false }}
      run: git tag ${{ steps.new_version.outputs.version_tag }} && git push --tags

    - name: Create Github release
      if: ${{ !env.ACT && false }}
      uses: ncipollo/release-action@v1
      with:
      ## Upload artifacts as per ccs spec
        artifacts: "${{ env.ARTIFACT_NAME }}-${{ steps.new_version.outputs.version_tag }}+${{ needs.build.outputs.BUILD_NUMBER }}.yaml"
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: false
        artifactErrorsFailBuild: true
        draft: false
        name: Release ${{ steps.new_version.outputs.version_tag }}+${{ needs.build.outputs.BUILD_NUMBER }} # name of the release
        replacesArtifacts: true
        removeArtifacts: true
        tag: ${{ steps.new_version.outputs.version_tag }}

      ## Generate release notes as per conventional commits
 #### publish ############################################
 # Create Github release with assets/artifacts
 # Publishing of artifact could be done separatly 


